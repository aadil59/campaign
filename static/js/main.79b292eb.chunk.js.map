{"version":3,"sources":["common/Header/Header.jsx","components/Campaign.jsx","components/SearchByName.jsx","container/Campaigns.jsx","App.jsx","serviceWorker.js","index.jsx","common/logo.jpg"],"names":["Header","className","alt","src","logo","Campaign","props","campaignItem","activeClass","statusCurrent","startDate","endDate","Fragment","name","Budget","SearchByName","search","Onclicksearch","handleChangeText","isSearchActive","type","placeholder","value","onChange","onClick","Campaigns","validateStatus","startDateParam","endDateParam","dateFrom","Date","dateTo","todaysdate","handleChangeDateStart","date","setState","campaignsList","CampaignAPI","state","handleChangeDateEnd","setTimeout","filterFn","filterDate","filter","item","selecedDate_s","selecedDate_e","restriFn","e","preventDefault","target","substr","componentDidMount","bind","this","searchedItem","toLowerCase","indexOf","placeholderText","selected","onSelect","handleSelectDate","maxDate","minDate","map","key","id","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.79b292eb.chunk.js","sourcesContent":["import React from 'react';\r\nimport logo from '../logo.jpg';\r\nimport './Header.css';\r\n\r\nexport default function Header () {\r\n  \r\n  return (\r\n    <header className='header py-3 mb-4'>\r\n      <div className=\"container\">\r\n        <div className='logo d-flex justify-content-between align-items-center'>\r\n          <img alt='logo' src={logo} />\r\n        </div>\r\n      </div>\r\n    </header>\r\n  )\r\n}","import React from 'react'\r\n\r\nexport default function  Campaign(props) {\r\n    const {campaignItem, statusCurrent} = props;\r\n    let activeClass = statusCurrent(campaignItem.startDate, campaignItem.endDate);\r\n    return (\r\n        <React.Fragment>\r\n            <tr>\r\n                <td>\r\n                    {campaignItem.name}\r\n                </td>\r\n                <td>\r\n                    {campaignItem.startDate}\r\n                </td>\r\n                <td>\r\n                    {campaignItem.endDate}\r\n                </td>\r\n                <td><span className={activeClass ?  \"circle active\" : \"circle inactive\"} ></span>{activeClass ? 'Active': 'Inactive'}</td>\r\n                <td>\r\n                    {campaignItem.Budget}\r\n                </td>\r\n            </tr>\r\n        </React.Fragment>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport default function SearchByName(props) {\r\n    const {search, Onclicksearch, handleChangeText, isSearchActive} = props;\r\n    return (\r\n        <React.Fragment>\r\n            <div className={isSearchActive === true ? \"form-group search-group active\" : \"form-group search-group\"}>\r\n                <input type=\"text\" name=\"search\" className=\"form-control\" placeholder=\"Search Campaign\" value={search} onChange={handleChangeText} />\r\n                <span className=\"btn-search\" onClick={Onclicksearch}><i className=\"fa fa-search\"></i></span>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n","import React, { Component } from \"react\";\r\nimport CampaignAPI from \"./campaignData.json\";\r\nimport Campaign from \"../components/Campaign\";\r\nimport SearchByName from \"../components/SearchByName\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nexport default class Campaigns extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.Onclicksearch = this.Onclicksearch.bind(this);\r\n    this.handleChangeText = this.handleChangeText.bind(this);\r\n    // this.handleChangeDate = this.handleChangeDate.bind(this);\r\n    this.state = {\r\n      campaignsList: [],\r\n      search: \"\",\r\n      startDate: null,\r\n      endDate: null,\r\n      isSearchActive: false\r\n    };\r\n  }\r\n  // TO RANDER ACTIVE OR INACTIVE STATE BASED ON START END DATE\r\n  validateStatus = (startDateParam, endDateParam) => {\r\n    let dateFrom = new Date(startDateParam);\r\n    let dateTo = new Date(endDateParam);\r\n    let todaysdate = new Date();\r\n    if (todaysdate > dateFrom && todaysdate < dateTo) {\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  // DATEPICKER EVENT HANDLER\r\n  handleChangeDateStart = date => {\r\n    this.setState({\r\n      startDate: date\r\n    });\r\n    if (date === null) {\r\n      this.setState({ campaignsList: CampaignAPI });\r\n    } else {\r\n      if (this.state.endDate !== null && date > this.state.endDate) {\r\n        this.setState({ campaignsList: [] });\r\n      } else {\r\n        this.setState({ campaignsList: CampaignAPI });\r\n      }\r\n    }\r\n  };\r\n  handleChangeDateEnd = date => {\r\n    this.setState({\r\n      endDate: date\r\n    });\r\n    setTimeout(() => {\r\n      this.filterFn(this.state.startDate, date);\r\n      if (date === null) {\r\n        this.setState({ campaignsList: CampaignAPI });\r\n      }\r\n    }, 100);\r\n  };\r\n\r\n  // TO RANDER CAMPAIGN BASED ON START END DATE\r\n  filterFn = (startDateParam, endDateParam) => {\r\n    const filterDate = CampaignAPI.filter(item => {\r\n      let dateFrom = new Date(item.startDate);\r\n      let dateTo = new Date(item.endDate);\r\n      let selecedDate_s = new Date(startDateParam);\r\n      let selecedDate_e = new Date(endDateParam);\r\n      let filterdCampaign =\r\n        (selecedDate_s <= dateFrom && selecedDate_e >= dateFrom) ||\r\n        (selecedDate_s <= dateTo && selecedDate_e >= dateTo);\r\n      // console.log(filterdCampaign);\r\n      return filterdCampaign;\r\n    });\r\n    this.setState({\r\n      campaignsList: filterDate\r\n    });\r\n  };\r\n\r\n  // RESTRICTION IF THE endDate IS BEFORE THE startDate,\r\n  restriFn = (startDateParam, endDateParam) => {\r\n    if (endDateParam < startDateParam) {\r\n      this.setState({\r\n        campaignsList: null\r\n      });\r\n    }\r\n  };\r\n\r\n  // TO SEARCH CAMPAIGN BY NAME\r\n  handleChangeText = e => {\r\n    e.preventDefault();\r\n    this.setState({ search: e.target.value.substr(0, 20) });\r\n  };\r\n\r\n  // TO OPEN SEARCH BOX FORM TOGGLE\r\n  Onclicksearch = () => {\r\n    this.setState({\r\n      isSearchActive: !this.state.isSearchActive\r\n    });\r\n  };\r\n\r\n  // DEFAULT STATE RANDERING\r\n  componentDidMount = () => {\r\n    const campaignsList = CampaignAPI;\r\n    this.setState({ campaignsList });\r\n  };\r\n\r\n  render() {\r\n    const { search, isSearchActive, campaignsList } = this.state;\r\n\r\n    // SEARCH BY NAME FILTER STORAGE\r\n    const searchedItem = campaignsList.filter(item => {\r\n      return item.name.toLowerCase().indexOf(search.toLowerCase()) !== -1;\r\n    });\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"container\">\r\n          <div className=\"filter-ar d-flex justify-content-between align-items-center\">\r\n            <div className=\"datefilterWrapper\">\r\n              <DatePicker\r\n                placeholderText=\"Select Start date\"\r\n                selected={this.state.startDate}\r\n                onSelect={this.handleSelectDate}\r\n                onChange={this.handleChangeDateStart}\r\n                maxDate={this.state.endDate ? new Date(this.state.endDate) : null }\r\n              />\r\n              <DatePicker\r\n                placeholderText=\"Select End date\"\r\n                selected={this.state.endDate}\r\n                onSelect={this.handleSelectDate}\r\n                onChange={this.handleChangeDateEnd}\r\n                minDate={new Date(this.state.startDate)}\r\n              />\r\n            </div>\r\n            <SearchByName\r\n              search={search}\r\n              isSearchActive={isSearchActive}\r\n              Onclicksearch={this.Onclicksearch}\r\n              handleChangeText={this.handleChangeText}\r\n            />\r\n          </div>\r\n          <div className=\"table-wrap mt-3\">\r\n            <table className=\"table\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Name</th>\r\n                  <th>Start Date</th>\r\n                  <th>End Date</th>\r\n                  <th>Status</th>\r\n                  <th>Budget</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {searchedItem.map(campaignItem => (\r\n                  <Campaign\r\n                    key={campaignItem.id}\r\n                    campaignItem={campaignItem}\r\n                    statusCurrent={this.validateStatus}\r\n                  />\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport Header from \"./common/Header/Header\";\nimport Campaigns from \"./container/Campaigns\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header className=\"App-header\" />\n      <Campaigns />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.f5323dc0.jpg\";"],"sourceRoot":""}